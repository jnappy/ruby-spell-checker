ok: ../../ga-adi/adi-curriculum/projects/project-feedback.md | 32 |   - _Note: Half points are ok (1.5) but beyond that, detailed percentages are unnecessary._
 
repos: ../../ga-adi/adi-curriculum/readme.md | 12 | 1. [GA-ADI GitHub Organization](#) - (link TBD) contains separate repos all student assessments with starter and solution code
 
compilable: ../../ga-adi/adi-curriculum/resources/01-user-interface/custom-adapters-lab/readme.md | 33 | A compilable Android project.
 
dialogs: ../../ga-adi/adi-curriculum/resources/01-user-interface/dialog-morning-exercise/readme.md | 1 | title: Alert dialogs 
 
checkbox: ../../ga-adi/adi-curriculum/resources/01-user-interface/event-handlers-lesson/readme.md | 94 | In this practice, you must test that the user has checked a checkbox in order to enable a button. If the button is unchecked, the button should disable again. This is used in systems such as registration forms where the user must agree to terms before they can register. Starter code is provided in the ButtonEnabling project.
 
customizations: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-material-design-lesson/readme.md | 65 |     <!-- theme customizations -->
 
Namespacing: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-xml-lesson/readme.md | 89 | ## Introduction: Namespacing (15 mins)
 
namespaces: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-xml-lesson/readme.md | 91 |  One of the features of xml is that you can define your own elements, which provides flexibility and scope. But it also creates the strong possibility that, when combining XML content from different sources, you’ll experience clashes between code in which the same element names serve very different purposes. For example, if you’re running a bookstore, your use of <element> tags in XML may be used to track books. A mortgage broker would use ```<element>``` in a different way – perhaps to track a deed. A dentist or doctor might use ```<element>``` to refer to chemical solution. Here is where problems can arise. To solve this ambiguity XML namespaces attempt to keep different semantic usages of the same XML elements separate. In our example, each person could define their own namespace and then prepend the name of their namespace to specific tags:  ```<book:element> ``` is different from ```<broker:element>``` and ```<medrec:element>```. A Namespace is a set of unique names. A namespace is declared as follows:
 
Namespace: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-xml-lesson/readme.md | 91 |  One of the features of xml is that you can define your own elements, which provides flexibility and scope. But it also creates the strong possibility that, when combining XML content from different sources, you’ll experience clashes between code in which the same element names serve very different purposes. For example, if you’re running a bookstore, your use of <element> tags in XML may be used to track books. A mortgage broker would use ```<element>``` in a different way – perhaps to track a deed. A dentist or doctor might use ```<element>``` to refer to chemical solution. Here is where problems can arise. To solve this ambiguity XML namespaces attempt to keep different semantic usages of the same XML elements separate. In our example, each person could define their own namespace and then prepend the name of their namespace to specific tags:  ```<book:element> ``` is different from ```<broker:element>``` and ```<medrec:element>```. A Namespace is a set of unique names. A namespace is declared as follows:
 
xmlns: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-xml-lesson/readme.md | 97 | In the attribute xmlns:pfx, xmlns is like a reserved word, which is used only to declare a namespace. In other words, xmlns is used for binding namespaces. A namespace has a prefix, in our example it is "pfx", and URI, "http://www.example.com". Although a namespace usually looks like a URL, that doesn't mean that one must be connected to the Internet to actually declare and use namespaces. Our full example would look like this:
 
xmlns: ../../ga-adi/adi-curriculum/resources/01-user-interface/intro-to-xml-lesson/readme.md | 97 | In the attribute xmlns:pfx, xmlns is like a reserved word, which is used only to declare a namespace. In other words, xmlns is used for binding namespaces. A namespace has a prefix, in our example it is "pfx", and URI, "http://www.example.com". Although a namespace usually looks like a URL, that doesn't mean that one must be connected to the Internet to actually declare and use namespaces. Our full example would look like this:
 
instantiations: ../../ga-adi/adi-curriculum/resources/01-user-interface/listviews-listadapters-custom-adapters-lesson/readme.md | 139 | > Check: If a screen can fit exactly ten list items on the screen at any moment, what is the maximum amount instantiations of the list item that can exist in memory at any point in time?
 
comparators: ../../ga-adi/adi-curriculum/resources/01-user-interface/listviews-listadapters-lab/readme.md | 27 | - Custom comparators must be used to resort based on the currently selected sort
 
comparators: ../../ga-adi/adi-curriculum/resources/01-user-interface/listviews-listadapters-lab/rubric.md | 13 | | Custom comparators must be used to resort based on the currently selected sort | | | | n/a |
 
Dialogs: ../../ga-adi/adi-curriculum/resources/01-user-interface/more-material-design-hw/readme.md | 36 | * Dialogs
 
instantiations: ../../ga-adi/adi-curriculum/resources/01-user-interface/recyclerview-lesson/readme.md | 125 | > Check: If a screen can fit exactly ten list items on the screen at any moment, what is the maximum amount instantiations of the list item that can exist in memory at any point in time?
 
Interpolator: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 21 | * Modify the following properties of an animation: Duration (ms), Interpolator (curve)
 
Flipboard: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 45 | Screen transitions on Flipboard (image 1) exhibit the principle of squash and stretch to express that the surfaces inside the world of the application are rigid and board-like. By contrast, the screen transitions in Apple’s iBook (image 2) use the principle of squash and stretch to echo the flexible and organic movement of turning the pages of a real paper book.
 
affordance: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 48 | Anticipation is all about giving the user insight into what is about to happen next. For example, the principle could be applied to the visual treatment of the interface as the user opens an application. It could also be applied to the transitions between experiences. Because gesture languages are relatively new to users, the principle of anticipation could also be used to provide affordance for gestural UIs. Anticipation gives clues about the speed and direction that objects in a UI can move and the gestural possibilities of those objects.
 
smartphones: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 51 | The aperture animation found in the camera application of many smartphones prepares the user for the action of taking a photograph.
 
keyframes: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 62 | In order to capture fast dynamic action with unusual movement, animators will use the straight-ahead technique and draw every single frame of an animation. The pose-to-pose drawing technique employs the use of keyframes (i.e. the important frames of a sequence) and in-betweens (i.e. the intermediate frames that express movement between the keyframes).  
 
dimensionality: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 103 | Solid drawing is about honoring the rules of three-dimensional space and giving objects and characters appropriate dimensionality through volume and weight. Solid drawing requires animators to understand the basics of three-dimensional shapes: anatomy, weight, balance, light and shadow.
 
Interpolators: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 113 | ## Introduction: Interpolators (5 mins)
 
interpolators: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 118 | All interpolators available in Android are subclasses of the Interpolator class. There are 9 subclasses:
 
Interpolator: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 118 | All interpolators available in Android are subclasses of the Interpolator class. There are 9 subclasses:
 
Interpolators: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 133 | ## Demo: Interpolators (5 mins)  
 
interpolators: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 134 | Now let's see how interpolators work in code. Import [InterpolatorApp] (https://github.com/generalassembly-studio/ADI-curriculum/tree/simple-animation-lesson/resources/04-workflow-and-dev-tools/simple-animation-lesson/InterpolatorApp) and run the project.  
 
anim: ../../ga-adi/adi-curriculum/resources/01-user-interface/simple-animation-lesson/readme.md | 137 | > Instructor Notes: Discuss 4 xml files in the folder res/anim: **pull_right.xml**, **pull_left.xml**, **push_out_left.xml**, **push_out_right.xml**. The transition between 2 activities is sliding from left to right. Pay students' attention to the fact that each anim file has an ```android:interpolator``` attribute.
 
inflater: ../../ga-adi/adi-curriculum/resources/01-user-interface/toolbars-and-menus-lesson/readme.md | 142 |         MenuInflater inflater = getMenuInflater();
 
inflater: ../../ga-adi/adi-curriculum/resources/01-user-interface/toolbars-and-menus-lesson/readme.md | 148 | We simply get the inflater (MenuInflater), and tell it to inflate the menu.
 
Framelayout: ../../ga-adi/adi-curriculum/resources/01-user-interface/toolbars-and-menus-lesson/readme.md | 206 | Let's start with a new app, and create it with a scrolling activity. We are going to add a Toolbar to the bottom, like how play Music has it. Right now, our entire Activity is contained in a CoordinatorLayout. Since we want to overlay the new toolbar, we are going to make a Framelayout to contain all of it.
 
Googling: ../../ga-adi/adi-curriculum/resources/01-user-interface/views-102-lesson/readme.md | 66 | Also, you can just Google it! Usually Googling "Android *TypeOfView*" would have the #1 link lead directly to the view's reference page. Try it: Google "Android TextView".
 
instantiations: ../../ga-adi/adi-curriculum/resources/01-user-interface/views-103-lesson/readme.md | 138 | > Check: If a screen can fit exactly ten list items on the screen at any moment, what is the maximum amount instantiations of the list item that can exist in memory at any point in time?
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lab/readme.md | 16 | In this lab you will be using your knowledge of classes to build an app that utilizes an Animal class, complete with properties, getters and setters. After completing the class, you will instantiate your Animal and use the getters and setters to fill out TextViews.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lab/readme.md | 16 | In this lab you will be using your knowledge of classes to build an app that utilizes an Animal class, complete with properties, getters and setters. After completing the class, you will instantiate your Animal and use the getters and setters to fill out TextViews.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lab/readme.md | 24 | - Create all getters and setters for the Animal  properties
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lab/readme.md | 33 | You will need to complete the constructor, getters and setters in the provided Animal.java file. MainActivity.java contains comments guiding you on the code you need to write.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lab/readme.md | 55 | * Tests Animal classes getters
 
templated: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 38 | These objects are first templated using the concept of `classes`. A `class` is a special *type* that can be user-defined to ensure every object of its type contain all the properties and methods of that class. Unlike data types which have intrinsic value - i.e an `int` is a number, `char` are characters - classes have defined values. For example, a __Car__ class could hold the `double` value of __speed__ and also `String` value of __model__.
 
Getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 120 | ### Introduction: Getters and setters (5 minutes)
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 123 | By definition, getters "get" or return stored information from an instance of a class; setters assign information / data to an instance of a class.
 
Getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 125 | ##### Demo: Getters and setters (5 minutes)
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 134 | Java naming convention dictates that getters should start with 'get' and then the name of the variable (minus any leading letters). The only exception is for getters with return type `boolean`, it is convention to name these as `isBoolean()` or `hasBoolean()`. For example our car might have a method: `hasLowFuel()`.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 134 | Java naming convention dictates that getters should start with 'get' and then the name of the variable (minus any leading letters). The only exception is for getters with return type `boolean`, it is convention to name these as `isBoolean()` or `hasBoolean()`. For example our car might have a method: `hasLowFuel()`.
 
Getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/classes-lesson/readme.md | 145 | ##### Guided Practice: Getters and setters (5 minutes)
 
refactored: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/control-flow-lesson/readme.md | 15 | 4. This lesson should be refactored to build fizz buzz slowly:  one independent practice to build fizz buzz as a method that accepts only one input and print out accordingly; then the final independent practice can be refactoring to build it with a for loop
 
refactoring: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/control-flow-lesson/readme.md | 15 | 4. This lesson should be refactored to build fizz buzz slowly:  one independent practice to build fizz buzz as a method that accepts only one input and print out accordingly; then the final independent practice can be refactoring to build it with a for loop
 
ue: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/control-flow-lesson/readme.md | 328 | String ue = "ue";
 
ints: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/control-flow-lesson/readme.md | 336 | Well, Objects and arrays are complex collections of values, and when we refer to them, we're actually referencing where they live in memory. That's why we say Objects are **passed by reference** while things like ints and floats are **passed by value**.
 
foundational: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/control-flow-lesson/readme.md | 490 | These are some of the foundational tools you'll use in many of your applications. You'll probably need to refresh yourself on the exact syntax a few times before you memorize it, but it's important to be able to remember, these core "control flow" concepts, in general, because they'll come up in pretty much every programming language you'll ever encounter.
 
Libs: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-collections-lab/readme.md | 2 | Mad Libs Game App Part 2 | lab | 1:30 | James Davis (New York)
 
Libs: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-collections-lab/readme.md | 11 | # ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Mad Libs Game App Part 2
 
libs: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-collections-lab/readme.md | 58 | 	* Result Activity will take the words provided by the main activity and display the resulting mad libs paragraph.
 
Comparators: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-types-and-variables-lesson/readme.md | 18 | ## Code Along - Comparators
 
ints: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-types-and-variables-lesson/readme.md | 168 | The same data type differentiation exists in Integers between shorts (did you notice it in our list), ints and longs.
 
dewi: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-types-and-variables-lesson/readme.md | 239 | In other words: Using an object is like using a dewi decimal system in the library. A variable assigned to an Object is given a number that references where a book can be found in the computer's library but is not a copy of the book itself. `Person a = new Person(Nancy, Drew); ` is a reference to the data Object that contains all info and methods in the class of that object.
 
str: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-types-and-variables-lesson/readme.md | 258 | String str = "abc";
 
ue: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/data-types-and-variables-lesson/readme.md | 352 | String ue = "ue";
 
Googling: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lab/readme.md | 19 | - Define a function `maxOfTwoNumbers` that takes two numbers as arguments and returns the largest of them. I would suggest using conditional statements. Do some Googling to figure this out if you forget how conditionals work.
 
"ratset: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lab/readme.md | 27 | - Define a function `reverseString` that computes the reversal of a string. For example, reverseString("jag testar") should return the string "ratset gaj".
 
Runtime: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 88 | - Runtime - a phase when the computer actually runs each statement in the program.  For example, when we run the `java HelloWorld.class` this is when the computer runs the java program bytecode.
 
"tac: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 428 |     reverseString("black cat"); => "tac kcalb"
 
"noom: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 429 |     reverseString("the cow jumped over the moon"); => "noom eht revo depmuj woc eht"
 
eht: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 429 |     reverseString("the cow jumped over the moon"); => "noom eht revo depmuj woc eht"
 
revo: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 429 |     reverseString("the cow jumped over the moon"); => "noom eht revo depmuj woc eht"
 
depmuj: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 429 |     reverseString("the cow jumped over the moon"); => "noom eht revo depmuj woc eht"
 
woc: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 429 |     reverseString("the cow jumped over the moon"); => "noom eht revo depmuj woc eht"
 
"srabeldnah: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
htiw: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
ekib: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
ym: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
edir: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
nac: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/functions-and-scope-lesson/readme.md | 430 |     reverseString("I can ride my bike with no handlebars"); => "srabeldnah on htiw ekib ym edir nac I"
 
Login: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/intro-to-data-modelling-lesson/readme.md | 87 | Remember that screens are Activities in Android. So, whenever you see screen, think of it as the activity you want to create. (i.e. The Login Screen would be the LoginActivity class)
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/oop-fundamentals-lesson/readme.md | 85 | > Ask why we use getters and setters instead of directly accessing our member variables
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/oop-fundamentals-lesson/readme.md | 112 | Notice the private modifier that goes in front of the mSpeed variable. Any calls to a Car object from other code won't have direct access to the variable. That is why getters and setters exist. With a few exceptions, you will almost always make your member variables private.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/oop-fundamentals-lesson/readme.md | 114 | > Check: Ask why we use getters and setters instead of directly accessing member variables.
 
prepended: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/oop-fundamentals-lesson/readme.md | 276 | Now we are going to put together what we learned today to make a custom Toast message! We want all of our Toast messages to have the text "My custom toast: " prepended to the messages we pass. Using the provided starter code (OverridingExample project), you need to accomplish three things:
 
ints: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/organizing-info-lesson/readme.md | 96 | The students must create a LinkedList containing ints 1-10. Afterwards, they must test to see if the values 5-15 exist in the list, and remove the elements that exist (so remove 5-10.) Finally, print the size of the list. Starter code is provided in ListTest.java
 
ints: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/organizing-info-lesson/readme.md | 167 |   - Create an array of ints containing the values: 1,2,3,4
 
ic: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/storing-data-in-collections-lesson/readme.md | 246 |       String ic = favoriteThings.get(indexOfIceCream);
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/subclassing-lab/readme.md | 14 | In this lab you will be using your knowledge of classes to build an Animal class, complete with properties, getters and setters. After completing the class, you will then create subclasses of Animal called Mammal and Reptile. Finally, you will create at least one subclass of Mammal, and one subclass of Reptile, making them whatever animals you want.
 
Serializable: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/subclassing-lab/readme.md | 36 | - Making your class Serializable so you can pass it in an Intent. See the link below for more information.
 
getters: ../../ga-adi/adi-curriculum/resources/02-programming-fundamentals-in-java/subclassing-lesson/readme.md | 25 | - Create a basic class with getters and setters
 
Libs: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 2 | Mad Libs Game App | lab | 1:30 | James Davis (New York)
 
Libs: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 6 | # ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Mad Libs Game App
 
Libs: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 10 | Mad Libs is a game where you provide certain words and the words are then inserted into a pre-written paragraph with blank spots for fill-ins. Typically, you read the sentence out loud, which usually creates a random (and hopefully, funny) story. [Here's an example of a Mad Lib](http://www.classroomjr.com/wp-content/uploads/2010/05/funny-mad-libs.gif).
 
edittexts: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 24 | 	* For testing purposes, the 6 edittexts must have the following ids (in no particular order):
 
edittext: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 36 | 	* If this is pressed and an edittext is not filled out, that edit text must show an error (via [EditText.setError()](http://developer.android.com/reference/android/widget/TextView.html#setError(java.lang.CharSequence)).
 
mab: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 58 | 	* Result Activity will take the words provided by the main activity and display the resulting mab lib paragraph.
 
scrollable: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lab/readme.md | 64 | 	* This file is not empty. It contains a couple of nested view groups, to make your life easier. It makes the app scrollable in case your views become taller than the screen. This is covered more in depth in a future lesson.
 
Login: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lesson/readme.md | 32 | Think about the activity that the user is doing on a screen. If you are looking at a screen whose purpose is to log in the user, for example, it should be called the Login Activity. If the activity shows a user's social network profile , it should be called the User Profile Activity.
 
getters: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/activities-and-intents-lesson/readme.md | 133 | Again, the Intent class has a handful of getters for extra data, usually formatted like *get_____Extra*. Examples, `getIntExtra()`, `getStringExtra()`, `getBooleanExtra()`, etc.
 
leaderboard: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/tic-tac-toe-lab/readme.md | 35 | - Add a leaderboard
 
ok: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/view-life-cycle-1-lesson/readme.md | 144 | There are many ways of saving and restoring the state of the activity, but we will be covering using Bundles for this lesson. In the next lesson, we will implement some of the other techniques. Generally, saving and restoring with bundles is used when you want to be able to restore state (also known as current state or state data) when the app is still active, but it is ok if state is lost when the entire app is closed. The opposite of that is persistent state, which uses persistent data. An example of this is data for application preferences.
 
aggregator: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/view-life-cycle-2-lesson/readme.md | 46 | One popular use for `SharedPreferences` is to hold app settings. For instance, a news aggregator app remembers the type of news articles and the preferred sources you like to receive your news from. You don't want to set this every time, so the app stores this information in `SharedPreferences` for easy retrieval the next time the app launches.
 
str: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/view-life-cycle-2-lesson/readme.md | 74 | String str = sharedPreferences.getString("exampleKey","DEFAULT"); //Initial value of the String is "Hello"
 
viewable: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/view-life-cycle-2-lesson/readme.md | 125 | In this demo, we will be looking at when `onPause` and `onResume` are called in a situation where the screen is only partially covered but the activity is still viewable in the background.
 
popup: ../../ga-adi/adi-curriculum/resources/03-activities-and-fragments/view-life-cycle-2-lesson/readme.md | 127 | To do this, we will be using a `Dialog`, which brings a popup over the screen, causing the underlying activity to pause and resume.
 
Devtools: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/command-line-hw/readme.md | 7 | standard: Workflow and Devtools
 
cheatsheets: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/command-line-hw/readme.md | 18 | Be sure to use the cheatsheets in the "Additional Resources" section in case you get stuck.
 
logcat: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/debugging-fundamentals-1-lesson/readme.md | 39 | An app can send messages to the logcat system to provide useful information to a developer. For instance, if an app crashed, the app would send a message saying that it crashed and that it crashed at a particular line of code!
 
Logcat: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/debugging-fundamentals-1-lesson/readme.md | 79 | ## Demo: Logcat (15 minutes)
 
logcat: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/debugging-fundamentals-2-lesson/readme.md | 30 | An app can send messages to the logcat system to provide useful information to a developer. For instance, if an app crashed, the app would send a message saying that it crashed and that it crashed at a particular line of code!
 
Logcat: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/debugging-fundamentals-2-lesson/readme.md | 70 | ## Demo: Logcat (15 minutes)
 
codebases: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 54 | - We all have individual accounts and put our codebases on our GitHub account
 
codebases: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 56 | - Developers can access codebases on other public accounts
 
acyclic: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 67 | - [Directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph)
 
init: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 128 | $ git init
 
Untracked: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 170 | Untracked files:
 
untracked: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 175 | nothing added to commit but untracked files present (use "git add" to track)
 
untracked: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 232 | If you press `return` in the terminal, you will now see that you have untracked changes.
 
github: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 324 | Now ask the person sitting next to you for their github name and navigate to their repository on github:
 
dropdown: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 384 | 4. Select the target branch your branch should be merged to, using the Base Branch dropdown
 
github: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-github-lesson/readme.md | 399 | * How does github know that I am allowed to push to a specific repo?
 
Brendzel: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-1/readme.md | 5 |     name: Matt Brendzel / Brooks Swinnerton / Jay Nappy
 
Swinnerton: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-1/readme.md | 5 |     name: Matt Brendzel / Brooks Swinnerton / Jay Nappy
 
Repo: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-1/readme.md | 49 | ## Structure of a Git Repo with Branching - Demo (15 mins)
 
Repo: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-1/readme.md | 53 | ![Git Repo with Two Commits](https://i.imgur.com/pUWMfdy.png)
 
Repo: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-1/readme.md | 57 | ![Git Repo with Three Commits](https://i.imgur.com/GFpv8d8.png)
 
Brenzel: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 5 |     name: Matt Brenzel / Brooks Swinnerton / Jay Nappy
 
Swinnerton: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 5 |     name: Matt Brenzel / Brooks Swinnerton / Jay Nappy
 
Workflows: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 113 | ## Team Workflows - Discussion (20 mins)
 
workflows: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 115 | So far, we've only talked about Rebase in the context of working alone. Here are a few examples of workflows - using both rebase and merge - that might get used in the field.
 
Workflows: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 117 | #### Single-Remote Workflows
 
togther: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 144 | - Historical Branches : `master` stores official releases, while `develop` serves as a living 'integration branch' that ties togther all the standalone features.
 
Workflows: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/git-team-workflow-2/readme.md | 157 | #### Distributed Workflows
 
Readme: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/github-markdown-lesson/readme.md | 1 | title: GitHub Markdown and Readme Files
 
Readme: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/github-markdown-lesson/readme.md | 9 | # ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) GitHub Markdown and Readme Files
 
html: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/github-markdown-lesson/readme.md | 13 | GitHub provides an easy way to show users information about what is in your repo through the use of readme files. When the user visits your repo, they see a nicely formatted html page that can include any information you want, including feature highlights, screenshots, version info, known bugs, directions for use, etc. You simply need to have a file named `readme.md` in the root of your repo to have the page automatically shown.
 
cheatsheet: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/github-markdown-lesson/readme.md | 15 | In the file, you simply need to write the GitHub markdown, or a special syntax, to display your content. The markdown is translated into HTML for you, but is simpler to write. You can actually write HTML in your file, but only a subset of full HTML is supported. A cheatsheet is linked below showing the most common markdown uses. Also included is a plugin that can be used with Android Studio which shows a preview of the readme as you're writing it. Be careful, this preview isn't 100% accurate, but gives a decent idea.
 
repos: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/github-markdown-lesson/readme.md | 17 | It is always a good idea to include readme files with your git repos simply to help anyone looking at your files in the future.
 
Mathe: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 5 |     name: Gerry Mathe
 
mv: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 246 | mv file-name file-name2
 
mv: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 254 | mv this-file.txt this-folder
 
mv: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 255 | mv that-file.txt that-folder/that-fileeeeeee.txt
 
Chmod: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 270 | ## UNIX permissions and Chmod - Intro (15 mins)
 
gerry: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 274 | An OS is meant to serve many users, A user may correspond to a real-world person, but also a program that acts as a specific user. In my laptop OS, I am "Gerry" and with gerry goes a set of permissions and restrictions on all files and folders, But I can also act for some specific program as the user "www" which corresponds to the privileges necessary to operate the local web server. Every User on the OS has a User ID - the name "Gerry" or "www" is just an alias for a User ID.
 
gerry: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 280 | * gerry owns the file, i.e. the file's owner is 'gerry'.
 
gerry: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 281 | * gerry is a member of the group that owns the file, i.e. the file's owner group is 'WDI'.
 
gerry: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 282 | * gerry is neither the owner, nor belonging to the group that owns the file.
 
Sep: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 300 |  0 drwxr-xr-x@  2 root  wheel    68 Sep  9  2014 Network
 
Sep: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 306 |  0 drwxrwxr-t@  2 root  admin    68 Sep  9  2014 cores
 
Sep: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 307 |  0 drwxr-xr-x   3 root  wheel   102 Sep  8  2014 data
 
dev: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 308 | 10 dr-xr-xr-x   3 root  wheel  4805 Aug 14 11:45 dev
 
sbin: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 313 |  0 drwxr-xr-x@ 59 root  wheel  2006 Apr 28 21:05 sbin
 
tmp: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 314 |  8 lrwxr-xr-x@  1 root  wheel    11 Jan 18  2015 tmp -> private/tmp
 
usr: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 315 |  0 drwxr-xr-x@ 12 root  wheel   408 Jan 18  2015 usr
 
rwx: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 335 | rwx rwx r-x
 
rwx: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 335 | rwx rwx r-x
 
rwx: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 382 | * Triplet for u: rwx => 4 + 2 + 1 = *7*
 
config: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 396 | If you open the file `.bashrc` using the command `subl ~/.bashrc`, you'll see your own config file for bash.
 
executables: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 405 | You’ll hear about _shell path_ (or $PATH) when working with the command line. The _shell path_ in OS X (or Linux) refers to a list of folders in the file system that contains files or executables that will be used by certain applications and programs.
 
config: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 451 | You can add folders in the $PATH by adding in the bash (or zsh) config file. If you open you terminal config file, you’ll see a line looking like:
 
config: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 451 | You can add folders in the $PATH by adding in the bash (or zsh) config file. If you open you terminal config file, you’ll see a line looking like:
 
config: ../../ga-adi/adi-curriculum/resources/04-workflow-and-dev-tools/terminal-navigating-the-file-system-lesson/readme.md | 463 | * `:$PATH` : the PATH variable can be defined is several files and by different programs, so at the end of re-definig the path, adding `:$PATH` means that all the PATH definitions made in other config files will be added to the new definition.
 
haptic: ../../ga-adi/adi-curriculum/resources/05-product-development/building-accessible-apps-lesson/readme.md | 34 | helping these users navigate their devices more easily, including text-to-speech, haptic feedback, gesture navigation, trackball and
 
proprioception: ../../ga-adi/adi-curriculum/resources/05-product-development/building-accessible-apps-lesson/readme.md | 39 | **Haptic** - relating to the sense of touch, in particular relating to the perception and manipulation of objects using the senses of touch and proprioception
 
haptic: ../../ga-adi/adi-curriculum/resources/05-product-development/building-accessible-apps-lesson/readme.md | 54 | KickBack is one of the official accessibility services provided by Google. It provides haptic feedback by vibrating the device briefly when you perform an action on the phone. It can be especially useful when using the touch screen. The feedback will inform you when you have found a valid control, like the slide-to-unlock handle. Additionally, it can be useful when navigating your device using a directional controller, as you know when your movement has resulted in an action. On devices running Android 4.0 and above, the functionality of KickBack is included in TalkBack.
 
focusable: ../../ga-adi/adi-curriculum/resources/05-product-development/building-accessible-apps-lesson/readme.md | 99 | provides several APIs that let you control whether a user interface control is focusable and even request that a control be given focus:
 
Uber: ../../ga-adi/adi-curriculum/resources/05-product-development/competitive-research-lesson/readme.md | 83 | - Do you think Uber thinks they’re competing with taxi services? Perhaps they think of themselves as a delivery service (of people, of packages).
 
Uber: ../../ga-adi/adi-curriculum/resources/05-product-development/competitive-research-lesson/readme.md | 85 | "Reach competitors" for Uber can be companies like Google (robotics, driving cars) and even Seamless (Uber started delivering lunch!) That’s _very_ different from competing with local taxi services.
 
Hulu: ../../ga-adi/adi-curriculum/resources/05-product-development/competitive-research-lesson/readme.md | 134 | Take 10 minutes, pair up and review both Hulu and Netflix - try to do both a feature inventory analysis and a pluses / delta model.
 
Ideation: ../../ga-adi/adi-curriculum/resources/05-product-development/design-thinking-and-ux-lesson/readme.md | 65 | - Ideation
 
Ideation: ../../ga-adi/adi-curriculum/resources/05-product-development/design-thinking-and-ux-lesson/readme.md | 151 | ## Independent Practice: Ideation (5 mins)
 
impactful: ../../ga-adi/adi-curriculum/resources/05-product-development/design-thinking-and-ux-lesson/readme.md | 221 | - Show don’t tell: Creating experiences w/ visuals and telling good stories communicate your vision in an impactful and meaningful way
 
Drawable: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 40 | *Drawable* - a general abstraction for "something that can be drawn." Most often you will deal with Drawable as the type of resource retrieved for drawing things to the screen. Unlike a View, a Drawable does not have any facility to receive events or otherwise interact with the user.
 
Drawable: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 40 | *Drawable* - a general abstraction for "something that can be drawn." Most often you will deal with Drawable as the type of resource retrieved for drawing things to the screen. Unlike a View, a Drawable does not have any facility to receive events or otherwise interact with the user.
 
gradle: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 90 | If the above described properties are different in manifest and gradle files, gradle overrides the manifest values. It is a general practice to update build.gradle file rather than manifest. So you can safely remove or don't even add these attributes in the manifest and just update the gradle.
 
gradle: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 90 | If the above described properties are different in manifest and gradle files, gradle overrides the manifest values. It is a general practice to update build.gradle file rather than manifest. So you can safely remove or don't even add these attributes in the manifest and just update the gradle.
 
Kitkat: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 105 | Create a new project that will support Ice Cream Sandwich (the most recent ICS API level) devices. When the project is created, open build.gradle(Module:app) and change minSdk to Kitkat API level. Run the project. If your testing device is Kitkat or higher, it should run successfully without any failures.  
 
Kitkat: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 105 | Create a new project that will support Ice Cream Sandwich (the most recent ICS API level) devices. When the project is created, open build.gradle(Module:app) and change minSdk to Kitkat API level. Run the project. If your testing device is Kitkat or higher, it should run successfully without any failures.  
 
gradle: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 115 | ...to the highest API level. Run the project. It should fail and throw an error that the device is not compatible (unless you have a Marshmallow Android device). *Pay attention that although in the manifest we set an API level to the version of our device, thus making our app compatible with the device, the gradle overrides its value and sets the minSdkLevel to the Marshmallow version (API Level 23).*
 
Runtime: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 118 | ## Guided Practice: Check System Version at Runtime (10 mins)
 
xlarge: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 186 | * size: small, normal, large, xlarge
 
ldpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 213 | - ldpi (low) ~120dpi
 
mdpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 214 | - mdpi (medium) ~160dpi
 
hdpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 215 | - hdpi (high) ~240dpi
 
xhdpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 216 | - xhdpi (extra-high) ~320dpi
 
xxhdpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 217 | - xxhdpi (extra-extra-high) ~480dpi
 
xxxhdpi: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 218 | - xxxhdpi (extra-extra-extra-high) ~640dpi
 
drawable: ../../ga-adi/adi-curriculum/resources/05-product-development/designing-for-multiple-devices-lesson/readme.md | 220 | After the images are ready, they are placed in the appropriate drawable resource directory. For example:
 
cardlist: ../../ga-adi/adi-curriculum/resources/05-product-development/multiple-devices-practice/readme.md | 18 | - Add your layout files (the multiple versions of cardlist and cal) in the appropriate folders in your Studio project
 
Bulleted: ../../ga-adi/adi-curriculum/resources/05-product-development/personas-from-research-lesson/readme.md | 46 |   - Bulleted lists of key observations
 
woud: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 27 | I think the best real life comparison I can make is assembling IKEA furniture. You can build the complicated furniture without the instructions; you will figure it out eventually. However, it woud probably go much faster and be much more efficient if you can refer to all the steps you want to take, and know all the pieces you'll need beforehand.
 
Instagram: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 71 | * As a user, I can show my Instagram photos on my profile.
 
upcomming: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 150 | Finally, now that you have a sense of how long everything should take, drag the tasks you want to work on for the upcomming sprint. Most companies put about 35-hours worth of tickets here, because that's the average work week.
 
trello: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 156 | Let's do the same thing for our travel app! We'll be making a trello board and setting up the expected time to implement it.
 
trello: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 160 | I would like you all to do all of the steps above. Make user stories, examine what you have and need, and develop a trello board for *one* of the following apps:
 
Uber: ../../ga-adi/adi-curriculum/resources/05-product-development/planning-before-development-lesson/readme.md | 166 | * Uber
 
Aarron: ../../ga-adi/adi-curriculum/resources/05-product-development/research-hw/readme.md | 46 | Think about this question: “If your website were a person, who would it be?” - Aarron Walters, UX Director/Mailchimp
 
frictionless: ../../ga-adi/adi-curriculum/resources/05-product-development/research-hw/readme.md | 55 | Before creating wireframes or designing screens you’ll want to understand your users behaviors and the ideal path for them to accomplish their goals. You’ll often hear the term “Happy Path” used to describe the most ideal, frictionless path a user can take to achieve an intended goal. Here is an example of a Facebook User Flow for determining how to comment on a post:
 
geofence: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/readme.md | 56 |   * Profile Fragment is responsible for enabling the geofence feature and showing details about the owner of the app.  
 
Shamer: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 1 | **Project Name**  Shamer
 
Shamer: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 3 | **Team Name**  Team Shamer
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 5 | **Team Members**  Charlyn, Yuliya, Anthony, Sufei
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 44 | |        | Crude saving of data to parse database  | Charlyn         |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 46 | |        | UX for reporting shames                 | Sufei, Charlyn  |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 48 | |        | Working framework                       | Sufei           |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 53 | |        | Fetching parse data to populate map | Charlyn        |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 54 | |        | Label map markers by category       | Sufei          |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 56 | |        | Filter feature                      | Charlyn, Sufei |
 
autocomplete: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 58 | |        | Search places autocomplete          | Sufei          |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 58 | |        | Search places autocomplete          | Sufei          |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 65 | |        | Demo prep       | Charlyn        |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 66 | |        | Make it pretty  | Anthony, Sufei |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 74 | ###### Charlyn
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/Proposal.md | 83 | ###### Sufei
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/README.md | 2 | Group Members: Charlyn, Yuliya, Anthony, Sufei
 
Graphcharts: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/README.md | 14 | - Graphcharts
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/retros/week-0.md | 3 | Complete all items specified in Sprint 1 (Crude saving of data to parse database, Map + location API, Yuliya, UX for reporting shames	Sufei, Charlyn
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/retros/week-0.md | 22 |   *  Team Member #1 Charlyn
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/solution-code/ProjectX/retros/week-0.md | 27 |   *  Team Member #2 Sufei   
 
Shamer: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 1 | **Project Name**  Shamer
 
Shamer: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 3 | **Team Name**  Team Shamer
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 5 | **Team Members**  Charlyn, Yuliya, Anthony, Sufei
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 44 | |        | Crude saving of data to parse database  | Charlyn         |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 46 | |        | UX for reporting shames                 | Sufei, Charlyn  |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 48 | |        | Working framework                       | Sufei           |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 53 | |        | Fetching parse data to populate map | Charlyn        |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 54 | |        | Label map markers by category       | Sufei          |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 56 | |        | Filter feature                      | Charlyn, Sufei |
 
autocomplete: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 58 | |        | Search places autocomplete          | Sufei          |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 58 | |        | Search places autocomplete          | Sufei          |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 65 | |        | Demo prep       | Charlyn        |
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 66 | |        | Make it pretty  | Anthony, Sufei |
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 74 | ###### Charlyn
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/Proposal.md | 83 | ###### Sufei
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/README.md | 2 | Group Members: Charlyn, Yuliya, Anthony, Sufei
 
Graphcharts: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/README.md | 14 | - Graphcharts
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/retros/week-0.md | 3 | Complete all items specified in Sprint 1 (Crude saving of data to parse database, Map + location API, Yuliya, UX for reporting shames	Sufei, Charlyn
 
Charlyn: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/retros/week-0.md | 22 |   *  Team Member #1 Charlyn
 
Sufei: ../../ga-adi/adi-curriculum/resources/05-product-development/testing-app-for-accessibility-lab/starter-code/retros/week-0.md | 27 |   *  Team Member #2 Sufei   
 
ideate: ../../ga-adi/adi-curriculum/resources/05-product-development/user-goals-and-flows-lesson/readme.md | 141 | We ideate to :
 
Storyboarding: ../../ga-adi/adi-curriculum/resources/05-product-development/user-goals-and-flows-lesson/readme.md | 148 | #### Storyboarding
 
Storyboarding: ../../ga-adi/adi-curriculum/resources/05-product-development/user-goals-and-flows-lesson/readme.md | 150 | Storyboarding is a great way of communicating the value your idea offers to others. A good experience should take the user on a journey, telling a story. So I’d like you to expand your idea a bit into a story.  
 
wireframing: ../../ga-adi/adi-curriculum/resources/05-product-development/user-goals-and-flows-lesson/readme.md | 170 | The level of your specificity of your thinking should be reflected in your flows and eventually wireframes. They should feed into one another—flows will be a great starting points for wireframes, and wireframing will help you figure out how to streamline and evolve your flow.
 
wireframe: ../../ga-adi/adi-curriculum/resources/05-product-development/user-goals-and-flows-lesson/readme.md | 178 | - Diagram: Flow + wireframe example to demo 1:1 relationship here:
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 80 | Uri singleUri = ContentUri.withAppendedId(UserDictionary.Words.CONTENT_URI,4);
 
Matcher: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 84 | #### URI Matcher
 
wildcard: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 88 | A content URI pattern matches content URIs using wildcard characters:
 
Matcher: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 93 | ## Demo: URI Matcher (10 mins)  
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 105 | The snippet below is the example of how a Uri is declared in the Java class and how UriMatcher works:
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 114 |     public static final Uri CONTENT_URI = Uri.parse("content://"
 
Matcher: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 131 | ## Guided Practice: URI Matcher (5 mins)
 
ok: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 228 | > Check: Why is it ok to create the database helper here?
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 244 | public Uri insert(Uri uri, ContentValues values) {
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 265 | * Use the sUriMatcher to identify the Uri type.
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 358 | * Perform the appropriate delete operation on the database depending on the selection criteria and the Uri type.
 
Refactor: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 401 | ## Independent Practice: Refactor the code (20 mins)
 
Refactor: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 423 | Refactor the code so that there are 2 input fields and the user could enter the name and quantity of the product and click the button "add". The information should be saved to the content provider. In addition add an update button that will update the product with the given name to whatever is in the quantity text field.
 
Uri: ../../ga-adi/adi-curriculum/resources/06-databases/content-provider-lesson/readme.md | 445 |         Uri CONTENT_URI = ContactsContract.Contacts.CONTENT_URI;
 
prepopulates: ../../ga-adi/adi-curriculum/resources/06-databases/cursor-adapters-lab/readme.md | 34 | - A MainActivity.java file that prepopulates the database
 
incrementing: ../../ga-adi/adi-curriculum/resources/06-databases/cursor-adapters-lesson/readme.md | 46 | > Check: Ask the students how to define an automatically incrementing `_id` column in SQLite.
 
ints: ../../ga-adi/adi-curriculum/resources/06-databases/cursor-adapters-lesson/readme.md | 151 | 5) An array of ints that contains the id of the view item in the layout to assign to the corresponding cursor data value
 
duplicative: ../../ga-adi/adi-curriculum/resources/06-databases/databases-tables-records-columns-lesson/readme.md | 66 | Relationships happen when we start seeing multiple duplicative information or when one object needs to "connect" to another object.
 
ssn: ../../ga-adi/adi-curriculum/resources/06-databases/relationships-between-tables-lab/readme.md | 63 |     * ssn
 
async: ../../ga-adi/adi-curriculum/resources/06-databases/relationships-between-tables-lab/readme.md | 74 | The app should be thread safe. To make app more responsive make sure to execute just one AsyncTask at a time. Thus, any async task that might be running, should be cancelled/stopped when another async task has just been started.
 
async: ../../ga-adi/adi-curriculum/resources/06-databases/relationships-between-tables-lab/readme.md | 74 | The app should be thread safe. To make app more responsive make sure to execute just one AsyncTask at a time. Thus, any async task that might be running, should be cancelled/stopped when another async task has just been started.
 
autoincremented: ../../ga-adi/adi-curriculum/resources/06-databases/relationships-between-tables-lesson/readme.md | 207 | In our examples we can see that the second entry in the table COMPANY is associated with the name "Harry", the table has an "_ID" column that gets autoincremented every time we add a new entry. In the DEPARTMENT table the second row has EMP_ID equal 2. Thus, we get the name "Harry" returned in the method ```getNameJoins()```.
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 65 | $ psql
 
ok: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 130 | ...then, each line after denotes a new column we're going to create for this table, what the column will be called, the data type, whether it's a primary key, and whether the database - when data is added - can allow data without missing values.  In this case, we're not allowing NAME, AGE, or ID to be blank; but we're ok with website being blank.
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 154 | In psql that will look like:
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 178 | In psql that will look like:
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 189 | - Jill's full name is Jilly Cakes; she's 30 years old, and lives at 123 Webdev Dr. Boston, MA
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 189 | - Jill's full name is Jilly Cakes; she's 30 years old, and lives at 123 Webdev Dr. Boston, MA
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 192 | - Slagathorn's full name is Slaggy McRaggy; he's 28 and prefers not to list his address
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 197 | INSERT INTO students VALUES (2, 'Jilly Cakes', 30, '123 Webdev Dr. Boston, MA');
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 203 | In psql this should look like:
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 206 | WDI=# INSERT INTO students VALUES (2, 'Jilly Cakes', 30, '123 Webdev Dr. Boston, MA');
 
datapoints: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 219 | So now that we have this data saved, we're going to need to access it at some point, right?  We're going to want to _select_ particular datapoints in our dataset provided certain conditions.  The PostgreSQL SELECT statement is used to fetch the data from a database table which returns data in the form of result table. These result tables are called result-sets. The syntax is just what you would have guessed:
 
dataset: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 219 | So now that we have this data saved, we're going to need to access it at some point, right?  We're going to want to _select_ particular datapoints in our dataset provided certain conditions.  The PostgreSQL SELECT statement is used to fetch the data from a database table which returns data in the form of result table. These result tables are called result-sets. The syntax is just what you would have guessed:
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 237 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 237 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 239 |   4 | Jackie Lackie  | 101 | 2 OldForThis Ct, Fivetowns, NY
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 240 |   5 | Slaggy McRaggy |  28 |
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 251 |  Jilly Cakes    |  30
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 253 |  Jackie Lackie  | 101
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 254 |  Slaggy McRaggy |  28
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 269 |  Jilly Cakes
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 271 |  Slaggy McRaggy
 
orderedby: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 275 | - How about the names of students orderedby age? Done:
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 283 |  Slaggy McRaggy |  28
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 284 |  Jilly Cakes    |  30
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 285 |  Jackie Lackie  | 101
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 295 |  Jackie Lackie  | 101
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 296 |  Jilly Cakes    |  30
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 298 |  Slaggy McRaggy |  28
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 310 |   4 | Jackie Lackie  | 101 | 2 OldForThis Ct, Fivetowns, NY
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 335 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 335 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 337 |   4 | Jackie Lackie  | 101 | 2 OldForThis Ct, Fivetowns, NY
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 338 |   5 | Slaggy McRaggy |  28 |
 
Jilly: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 353 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Webdev: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 353 |   2 | Jilly Cakes    |  30 | 123 Webdev Dr. Boston, MA
 
Lackie: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 355 |   4 | Jackie Lackie  | 101 | 2 OldForThis Ct, Fivetowns, NY
 
Slaggy: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 356 |   5 | Slaggy McRaggy |  28 |
 
Rossi: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 367 |   - Laura Rossi is 70 and listed her address as "Unlisted"
 
Daniele: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 368 |   - David Daniele is 28 and lives at 300 Dannington Ln., Washington, DC.
 
Dannington: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 368 |   - David Daniele is 28 and lives at 300 Dannington Ln., Washington, DC.
 
Fitz: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 370 |   - Randi Fitz is 28 and lives in Oceanside, NY
 
Postgresql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-databases-sql-sqlite-lesson/readme.md | 397 | Here are a list of some common Postgresql commands that you might need:
 
Sandiego: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 10 | # Use SQL to find Carmen Sandiego
 
interweb: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 18 | We're going to use what we've learned already about searching with SQL commands, and apply it to chase down and capture an elusive and world-reknowned thief, Carmen Sandiego. Follow the clues, use the interweb - write down both the SQL commands /queries you used and your answers to the clues - and figure out where Carmen's headed, so we can catch her and bring her in.
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 29 | # Enter psql
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 30 | psql
 
carmen: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 35 | # Connect to carmen
 
carmen: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 36 | \c carmen
 
psql: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 43 | psql -d carmen -f /your/path/to/this/file/starter-code/world.sql
 
carmen: ../../ga-adi/adi-curriculum/resources/06-databases/WDI-sql-select-lab/readme.md | 43 | psql -d carmen -f /your/path/to/this/file/starter-code/world.sql
 
Searchable: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/enable-search-lab/readme.md | 27 | - Add a Searchable xml file
 
inflater: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/enable-search-lesson/readme.md | 90 |     MenuInflater inflater = getMenuInflater();
 
Searchable: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/enable-search-lesson/readme.md | 108 | The first step to making an app searchable is to create what is called a Searchable Configuration. This is an xml file that contains basic setup information for the search, such as the name of the app or activity we are making searchable, and a hint to tell the user what to search for.
 
functionless: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/enable-search-lesson/readme.md | 112 | The next step is to add some additional code to the onCreateOptionsMenu. This code will set our previously functionless SearchView to have the correct searchable configuration options we just created.
 
args: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/enable-search-lesson/readme.md | 222 |                 new String[]{query}, // d. selections args
 
youtube: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/google-play-services-lesson/readme.md | 45 | Keep an eye on the Google Developers youtube channel for new updates about new features from Google.
 
dp: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 161 | * **big picture style** - displays a bitmap up to 256 dp tall similar to a screenshot notification:  
 
Ipsum: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Lorem: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Ipsum: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
popularised: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Letraset: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Lorem: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Ipsum: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Aldus: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Lorem: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 181 | bigText.bigText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
 
Lorem: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 183 | bigText.setSummaryText("By: Author of Lorem ipsum");
 
Inbox: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/notifications-lesson/readme.md | 209 | Add 3 buttons - Big Text Style, Big Picture Style, Inbox Style - to the project you've been working on. Also, use the code above to help you create 3 types of expanded notifications. When the notification is clicked, it should open another activity (Second Activity). You can use any picture for Big Picture Style notification.
 
Refactor: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/thread-safe-app-lab/readme.md | 23 | Refactor the starter code so that when the image gets changed, it should get saved to a file on the background thread using AsyncTask and upon saving the image, the user will receive a toast.
 
Util: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/thread-safe-app-lab/readme.md | 38 | - Picture Util - helper class that deals with saving and loading images; you do not have to modify anything in this class;
 
async: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/threading-lesson/readme.md | 13 | * Create a basic async task
 
Async: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/threading-lesson/readme.md | 65 | ## Introduction: Async Task (15 mins)
 
Params: ../../ga-adi/adi-curriculum/resources/07-android-technologies-and-services/threading-lesson/readme.md | 79 | * Params - the type of the parameters sent to the task upon execution
 
dev: ../../ga-adi/adi-curriculum/resources/08-testing/intro-to-testing-lesson/readme.md | 46 | In the worst case, if a dev finds an issue but cannot fix it right away, they can notify the QA engineers of the known issue. Although it's not the best case scenario, saying "I'm aware of this issue" is a lot better than hearing "How did you miss this issue?!"
 
Login: ../../ga-adi/adi-curriculum/resources/08-testing/intro-to-testing-lesson/readme.md | 140 | Example: The Login screen
 
username: ../../ga-adi/adi-curriculum/resources/08-testing/intro-to-testing-lesson/readme.md | 143 | - **Assertion**: After entering their username and password, the user will be logged in and looking at the home page
 
Login: ../../ga-adi/adi-curriculum/resources/08-testing/intro-to-testing-lesson/readme.md | 145 | > Check: Show the Login Test Case. What assertions can be made from other conditionals?
 
Login: ../../ga-adi/adi-curriculum/resources/08-testing/intro-to-testing-lesson/readme.md | 151 | Example: The Login screen
 
weblink: ../../ga-adi/adi-curriculum/resources/08-testing/usability-testing-lab/readme.md | 40 | - when the item in the listVew is clicked, the app should open the weblink with information about the clicked sign
 
resizes: ../../ga-adi/adi-curriculum/resources/08-testing/usability-testing-lesson/readme.md | 87 | Special attention should be paid to the space allocation within an app. The Android platform runs on a variety of screen sizes and the system gracefully resizes your application's UI to fit each one.  For example, tablets offer more space in which your application can present multiple sets of information at once, while a handset device usually requires that you split those sets apart and display them separately. So even though a UI designed for handsets will properly resize to fit a tablet, it does not fully leverage the potential of the tablet's screen to enhance the user experience.
 
resize: ../../ga-adi/adi-curriculum/resources/08-testing/usability-testing-lesson/readme.md | 87 | Special attention should be paid to the space allocation within an app. The Android platform runs on a variety of screen sizes and the system gracefully resizes your application's UI to fit each one.  For example, tablets offer more space in which your application can present multiple sets of information at once, while a handset device usually requires that you split those sets apart and display them separately. So even though a UI designed for handsets will properly resize to fit a tablet, it does not fully leverage the potential of the tablet's screen to enhance the user experience.
 
ui: ../../ga-adi/adi-curriculum/resources/08-testing/usability-testing-lesson/readme.md | 102 | > Image 2: the right allocation of the ui elements. No unused space.
 
Mathe: ../../ga-adi/adi-curriculum/resources/09-web-communication/api-intro-lesson/readme.md | 4 | creator: Gerry Mathe (London)
 
url: ../../ga-adi/adi-curriculum/resources/09-web-communication/api-intro-lesson/readme.md | 103 | If we searched for the movie Die Hard, the search url would look like this: `http://www.omdbapi.com/?s=die+hard`
 
Quickstart: ../../ga-adi/adi-curriculum/resources/09-web-communication/email-client-app-lab/readme.md | 15 | Before you get started, definitely take a look at the [Android Quickstart Guide](https://developers.google.com/gmail/api/quickstart/android).
 
Superheroic: ../../ga-adi/adi-curriculum/resources/09-web-communication/gson-lab/readme.md | 34 | - [Docs on Marvel's Superheroic REST Api](http://www.codingricky.com/marvels-superheroic-rest-api/)
 
Instagram: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-practice-lab/readme.md | 18 | * Instagram
 
username: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-practice-lab/readme.md | 23 | Here's an example: When clicking the login screen, a POST request is made, sending the username and password to the server.
 
Login: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-practice-lab/readme.md | 50 |     1. Login => Home
 
http: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 35 | * protocol identifier: For the URL http://example.com, the protocol identifier is http
 
cacheable: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 47 | REST stands for Representational State Transfer. (It is sometimes spelled "ReST".) It relies on a stateless, client-server, cacheable communications protocol -- and in virtually all cases, the HTTP protocol is used. REST is an architecture style for designing networked applications. The idea is that, rather than using complex mechanisms such as CORBA, RPC or SOAP to connect between machines, simple HTTP is used to make calls between machines.
 
http: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 80 | * The **protocol** is http
 
url: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 88 | Look at the url and break it into separate parts. Name each of them:
 
incrementing: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 138 | advertisements or incrementing a web counter. Making arbitrary GET requests without regard to the context of the application's state should therefore be considered safe.
 
filename: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 252 | * Content-Disposition: An opportunity to raise a "File Download" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters. For instance:  
 
extendible: ../../ga-adi/adi-curriculum/resources/09-web-communication/http-rest-lesson/readme.md | 306 | REpresentational State Transfer, or REST, is a set of constraints that ensure a scalable, fault-tolerant and easily extendible system. The world-wide-web is an example of such system (and the biggest example, one might say). REST by itself is not a new invention, but it's the documentation on such systems like the world-wide-web.
 
unordered: ../../ga-adi/adi-curriculum/resources/09-web-communication/json-lesson/readme.md | 44 | An object is an unordered set of name/value pairs. An object begins with `{` (left brace) and ends with `}` (right brace). Each name is followed by `:` (colon) and the name/value pairs are separated by `,` (comma).
 
url: ../../ga-adi/adi-curriculum/resources/09-web-communication/networking-in-android-lesson/readme.md | 70 |       URL url = new URL(myUrl);
 
conn: ../../ga-adi/adi-curriculum/resources/09-web-communication/networking-in-android-lesson/readme.md | 71 |       HttpURLConnection conn = (HttpURLConnection) url.openConnection();
 
sb: ../../ga-adi/adi-curriculum/resources/09-web-communication/networking-in-android-lesson/readme.md | 99 |     StringBuilder sb = new StringBuilder();
 
br: ../../ga-adi/adi-curriculum/resources/09-web-communication/networking-in-android-lesson/readme.md | 100 |     BufferedReader br = new BufferedReader(new InputStreamReader(stream));
 
repos: ../../ga-adi/adi-curriculum/resources/09-web-communication/networking-in-android-lesson/readme.md | 146 | In our app we have used the GitHub API that returns information about repos that a user has on GitHub. Let's process JSON in the way the user will see just the names of the repos.
 
Gradle: ../../ga-adi/adi-curriculum/resources/09-web-communication/stock-price-lab/readme.md | 32 | Line to add to Gradle to use GSON
 
url: ../../ga-adi/adi-curriculum/resources/09-web-communication/stock-price-lab/readme.md | 41 |             URL url = new URL("http://dev.markitondemand.com/MODApis/Api/v2/Quote/json?symbol="+symbol);
 
Authenticator: ../../ga-adi/adi-curriculum/resources/09-web-communication/stock-price-lab/readme.md | 77 | - [Account Authenticator Stub Code](http://developer.android.com/training/sync-adapters/creating-authenticator.html)
 
authenticator: ../../ga-adi/adi-curriculum/resources/09-web-communication/sync-adapters-lesson/readme.md | 76 | 1. Creating the account authenticator (if needed)
 
authenticator: ../../ga-adi/adi-curriculum/resources/09-web-communication/sync-adapters-lesson/readme.md | 86 | Since we aren't going to be authenticating with anything in our example, the starter-code contains the [stub authenticator code provided by Google](http://developer.android.com/training/sync-adapters/creating-authenticator.html).
 
syncable: ../../ga-adi/adi-curriculum/resources/09-web-communication/sync-adapters-lesson/readme.md | 180 | **READ_SYNC_SETTINGS**: Needed to check if the account is syncable
 
Newswire: ../../ga-adi/adi-curriculum/resources/09-web-communication/sync-adapters-lesson/readme.md | 327 | Let's use the New York Times Newswire API to get the latest stories. We can sync this every minute to show any new stories that come in. http://developer.nytimes.com/
 
url: ../../ga-adi/adi-curriculum/resources/09-web-communication/sync-adapters-lesson/readme.md | 348 |             URL url = new URL("http://api.nytimes.com/svc/news/v3/content/all/all/all.json?limit=20&api-key=YOURAPIKEY");
 
subtractor: ../../ga-adi/adi-curriculum/resources/10-computer-science/big-o-lesson/readme.md | 129 |     int subtractor = Math.round(Math.random() * 10);
 
2nd: ../../ga-adi/adi-curriculum/resources/10-computer-science/big-o-lesson/readme.md | 144 | Say we are looking for a person's name in the phone book. You haven't checked any of it yet, so you start right in the middle. You don't happen to open right to the page, but you know that because a phone book is sorted, the person's name is farther along in the book. So you split the 2nd half of the book in half again. You repeat this process until you find the person's name. This is known as __binary search__, which operates in O(log n) time.
 
Linearithmic: ../../ga-adi/adi-curriculum/resources/10-computer-science/big-o-lesson/readme.md | 149 | ## Linearithmic (O(n log n)) Time
 
linearithmic: ../../ga-adi/adi-curriculum/resources/10-computer-science/big-o-lesson/readme.md | 162 | | O(n(log(n)) | linearithmic |
 
fibonacci: ../../ga-adi/adi-curriculum/resources/10-computer-science/big-o-lesson/readme.md | 168 | > Example of c^n is recursive fibonacci
 
5th: ../../ga-adi/adi-curriculum/resources/10-computer-science/list-lesson/readme.md | 236 | 	//we were able to go directly to the 5th index of the
 
4th: ../../ga-adi/adi-curriculum/resources/10-computer-science/list-lesson/readme.md | 244 | 	//In order to remove the item at index 3 (the 4th element)
 
sublists: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 36 | Merge Sort is a "Divide and Conquer" algorithm. Essentially, it works by taking a list or array of size _n_ into _n_ sublists with 1 element each. At this point, each sublist is sorted. Then, it repeatedly merges sublists together into new, sorted sublists. When merging the lists, elements from each list are compared against each other, and are added into the merged sublist from smallest to greatest. This process continues until only the final, fully sorted, list remains.
 
sublists: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 36 | Merge Sort is a "Divide and Conquer" algorithm. Essentially, it works by taking a list or array of size _n_ into _n_ sublists with 1 element each. At this point, each sublist is sorted. Then, it repeatedly merges sublists together into new, sorted sublists. When merging the lists, elements from each list are compared against each other, and are added into the merged sublist from smallest to greatest. This process continues until only the final, fully sorted, list remains.
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 66 | func mergeSort( var a as array )
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 76 | end func
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 78 | func merge( var a as array, var b as array )
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/merge-sort-lesson/readme.md | 95 | end func
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/sorting-algorithms-lesson/readme.md | 100 | func bubblesort( var a as array )
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/sorting-algorithms-lesson/readme.md | 105 | end func
 
pseudocoded: ../../ga-adi/adi-curriculum/resources/10-computer-science/sorting-algorithms-lesson/readme.md | 114 | Now, you're going to write Java code to implement the pseudocoded algorithm above. For a small optimization, think about how you could know the algorithm is complete without having to run the nested `for` loops - once this has been achieved, have the algorithm quit.
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/sorting-algorithms-lesson/readme.md | 177 | func insertionSort( var a as array )
 
func: ../../ga-adi/adi-curriculum/resources/10-computer-science/sorting-algorithms-lesson/readme.md | 182 | end func
 
ok: ../../ga-adi/adi-curriculum/resources/lab-feedback.md | 32 |   - _Note: Half points are ok (1.5) but beyond that, detailed percentages are unnecessary._
 
foundational: ../../ga-adi/adi-curriculum/resources/readme.md | 37 | In this unit, students will be practicing the basics of XML, how to navigate an OS, version control, and foundational programming concepts in Java/Android that we'll use for the entire rest of the course.
 
foundational: ../../ga-adi/adi-curriculum/resources/readme.md | 39 | As it stands now, pre-work consists of workshops and third party resources that reinforce programming fundamentals for Android, so n this unit, we review data types, functions, and other foundational concepts in Java.
 
newsfeeder: ../../ga-adi/adi-curriculum/resources/readme.md | 469 | Students have already worked in small groups to accomplish various labs and exercises, but this time, students will be challenged to work on a whole project with a small team.  Instructors will group students into groups of 3-4, and students will perform user experience methods to architect, design, and collaboratively build a newsfeeder app.
 
Dev: ../../ga-adi/adi-curriculum/resources/standards-learning-goals.md | 7 | 4. Workflow and Dev Tools
 
